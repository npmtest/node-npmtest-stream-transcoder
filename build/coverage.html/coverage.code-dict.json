{"/home/travis/build/npmtest/node-npmtest-stream-transcoder/test.js":"/* istanbul instrument in package npmtest_stream_transcoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stream-transcoder/lib.npmtest_stream_transcoder.js":"/* istanbul instrument in package npmtest_stream_transcoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stream_transcoder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stream_transcoder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stream-transcoder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stream-transcoder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stream_transcoder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stream_transcoder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stream_transcoder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_stream_transcoder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stream_transcoder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_stream_transcoder.__dirname + '/lib.npmtest_stream_transcoder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stream-transcoder/node_modules/stream-transcoder/index.js":"module.exports = require('./lib/transcoder.js');\n","/home/travis/build/npmtest/node-npmtest-stream-transcoder/node_modules/stream-transcoder/lib/transcoder.js":"var util = require('util'),\n\tEventEmitter = require('events').EventEmitter,\n\tspawn = require('child_process').spawn,\n\treadline = require('readline'),\n\tos = require('os');\n\n\tvar FFMPEG_BIN_PATH = process.env.FFMPEG_BIN_PATH || 'ffmpeg';\n/*\n\tTranscodes a media stream from one format to another.\n\t @source A file or a readable stream. \n\t\n\tEvents:\n\t 'metadata' emitted when media metadata is available. \n\t  @metadata (callback parameter) The media mediadata.\n\t\n\t 'progress' emitted when transcoding has progressed.\n\t  @progress (callback parameter) The status of the transcoding process.\n\t\n\t 'finish' emitted when transcoding has completed.\n\t\n\t 'error' emmited if an error occurs.\n\t  @error (callback parameter) The error that occured.\n\t\n*/\nfunction Transcoder(source) {\n\tif (!(this instanceof Transcoder)) return new Transcoder(source);\n\t\n\tEventEmitter.call(this);\n\t\n\tthis.source = source;\n\t\n\tthis.args = { };\n\tthis.lastErrorLine = null;\n\t\n\tTranscoder.prototype._parseMetadata = function(child) {\n\t\t\n\t\tvar self = this;\n\t\t\n\t\t/* Converts a FFmpeg time format to milliseconds */\n\t\tvar _parseDuration = function(duration) {\n\t\t\tvar d = duration.split(/[:.]/);\n\t\t\treturn parseInt(d[0]) * 60 * 60 * 1000\n\t\t\t\t   + parseInt(d[1]) * 60 * 1000\n\t\t\t\t   + parseInt(d[2]) * 1000\n\t\t\t\t   + parseInt(d[3]);\n\t\t};\n\t\t\n\t\t/* Filters for parsing metadata */\n\t\tvar metadataFilters = {\n\t\t\t'type': {\n\t\t\t\tmatch: /Stream #[0-9]+:[0-9]+.*?: (\\w+):/i,\n\t\t\t\ttransform: function(r) { if (r[1]) return r[1].toLowerCase(); }\n\t\t\t},\n\t\t\t'codec': {\n\t\t\t\tmatch: /Stream.*?:.*?: \\w+: (.*?)(?: |\\()/i,\n\t\t\t\tidx: 1\n\t\t\t},\n\t\t\t'samplerate': {\n\t\t\t\tmatch: /(\\d+) Hz/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: parseInt\n\t\t\t},\n\t\t\t'channels': {\n\t\t\t\tmatch: /\\d+ Hz, (.*?)(?:,|$)/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: function(r) {\n\t\t\t\t\tif (r == 'mono') return 1;\n\t\t\t\t\tif (r == 'stereo') return 2;\n\t\t\t\t\telse return parseInt(r);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'bitrate': {\n\t\t\t\tmatch: /(\\d+) (\\w)?b\\/s/i,\n\t\t\t\ttransform: function(r) {\n\t\t\t\t\tif (r[2] == 'k') return parseInt(r[1]) * 1000;\n\t\t\t\t\tif (r[2] == 'm') return parseInt(r[1]) * 1000 * 1000;\n\t\t\t\t\treturn parseInt(r[1]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'fps': {\n\t\t\t\tmatch: /(\\d+) fps/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: parseInt\n\t\t\t},\n\t\t\t'size': {\n\t\t\t\tmatch: /(\\d+)x(\\d+)(?:,|$)/i,\n\t\t\t\ttransform: function(r) {\n\t\t\t\t\tif (r[1] && r[2]) return { width: parseInt(r[1]), height: parseInt(r[2]) };\n\t\t\t\t}\n\t\t\t},\n\t\t\t'aspect': {\n\t\t\t\tmatch: /(\\d+)x(\\d+)(?:,|$)/i,\n\t\t\t\ttransform: function(r) {\n\t\t\t\t\tif (r[1] && r[2]) return parseInt(r[1]) / parseInt(r[2]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'colors': {\n\t\t\t\tmatch: /Video:.*?, (.*?)(?:,|$)/i,\n\t\t\t\tidx: 1\n\t\t\t}\n\t\t};\n\t\t\n\t\t/* Filters for parsing progress */\n\t\tvar progressFilters = {\n\t\t\t'frame': {\n\t\t\t\tmatch: /frame= .?([\\d]+)/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: parseInt\n\t\t\t},\n\t\t\t'fps': {\n\t\t\t\tmatch: /fps=([\\d.]+)/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: parseInt\n\t\t\t},\n\t\t\t'quality': {\n\t\t\t\tmatch: /q=([\\d.]+)/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: parseInt\n\t\t\t},\n\t\t\t'size': {\n\t\t\t\tmatch: /size=[\\s]+?([\\d]+)(\\w)?b/i,\n\t\t\t\ttransform: function(r) {\n\t\t\t\t\tif (r[2] == 'k') return parseInt(r[1]) * 1024;\n\t\t\t\t\tif (r[2] == 'm') return parseInt(r[1]) * 1024 * 1024;\n\t\t\t\t\treturn parseInt(r[1]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'time': {\n\t\t\t\tmatch: /time=(\\d+:\\d+:\\d+.\\d+)/i,\n\t\t\t\tidx: 1,\n\t\t\t\ttransform: _parseDuration\n\t\t\t},\n\t\t\t'bitrate': {\n\t\t\t\tmatch: /bitrate=[\\s]+?([\\d.]+)(\\w)?bits\\/s/i,\n\t\t\t\ttransform: function(r) {\n\t\t\t\t\tif (r[2] == 'k') return parseInt(r[1]) * 1000;\n\t\t\t\t\tif (r[2] == 'm') return parseInt(r[1]) * 1000 * 1000;\n\t\t\t\t\treturn parseInt(r[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t/* Applies a set of filters to some data and returns the result */\n\t\tvar _applyFilters = function(data, filters) {\n\t\t\t\n\t\t\tvar ret = {}\n\t\t\tfor (var key in filters) {\n\t\t\t\tfilter = filters[key];\n\t\t\t\tvar r = filter.match.exec(data) || [];\n\t\t\t\tif (filter.idx) r = r[filter.idx];\n\t\t\t\tvar v = (filter.transform ? filter.transform(r) : r);\n\t\t\t\tif (v) ret[key] = v;\n\t\t\t}\n\t\t\treturn ret;\n\t\t\t\n\t\t}\n\t\t\n\t\tvar metadata = { input: {}, output: {} };\n\t\tvar current = null;\n\t\t\n\t\tvar metadataLines = readline.createInterface({\n\t\t\tinput: child.stderr,\n\t\t\toutput: process.stdout,\n\t\t\tterminal: false\n\t\t});\n\t\t\n\t\tvar ended = false;\n\t\tvar _endParse = function() {\n\t\t\tif (!ended) self.emit('metadata', metadata);\n\t\t\tended = true;\n\t\t}\n\t\t\n\t\tchild.on('exit', _endParse);\n\t\t\n\t\tmetadataLines.on('line', function(line) {\n\t\t\t\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tif (!ended) {\n\t\t\t\t\t\n\t\t\t\t\t/* Process metadata */\n\t\t\t\t\t\n\t\t\t\t\tvar line = line.replace(/^\\s+|\\s+$/g, '');\n\t\t\t\t\t\n\t\t\t\t\tif (line.length > 0) self.lastErrorLine = line;\n\t\t\t\t\t\n\t\t\t\t\tif (/^input/i.test(line)) {\n\t\t\t\t\t\tcurrent = metadata.input = { streams: [] };\n\t\t\t\t\t} else if (/^output/i.test(line)) {\n\t\t\t\t\t\tcurrent = metadata.output = { streams: [] };\n\t\t\t\t\t} else if (/^Metadata:$/i.test(line)) {\n\t\t\t\t\t\tif (current.streams.length) {\n\t\t\t\t\t\t\tcurrent.streams[current.streams.length - 1].metadata = {};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrent.metadata = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (/^duration/i.test(line)) {\n\t\t\t\t\t\tvar d = /duration: (\\d+:\\d+:\\d+.\\d+)/i.exec(line);\n\t\t\t\t\t\tcurrent.duration = _parseDuration(d[1]);\n\t\t\t\t\t\tcurrent.synched = (/start: 0.000000/.exec(line) != null);\n\t\t\t\t\t} else if (/^stream mapping/i.test(line)) {\n\t\t\t\t\t\t_endParse();\n\t\t\t\t\t} else if (/^stream #/i.test(line)) {\n\t\t\t\t\t\tcurrent.streams.push(_applyFilters(line, metadataFilters));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar metadataTarget;\n\t\t\t\t\t\tif (current.streams.length && current.streams[current.streams.length - 1].metadata) {\n\t\t\t\t\t\t\tmetadataTarget = current.streams[current.streams.length - 1].metadata;\n\t\t\t\t\t\t} else if (current.metadata) {\n\t\t\t\t\t\t\tmetadataTarget = current.metadata;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (metadataTarget) {\n\t\t\t\t\t\t\tvar metadataInfo = line.match(/^(\\S+?)\\s*:\\s*(.+?)$/);\n\t\t\t\t\t\t\tif (metadataInfo && metadataInfo.length) {\n\t\t\t\t\t\t\t\tmetadataTarget[metadataInfo[1]] = metadataInfo[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/* Track progress */\n\t\t\t\tif (/^(frame|size)=/i.test(line) ) {\n\t\t\t\t\tif (!ended) _endParse();\n\t\t\t\t\tvar progress = _applyFilters(line, progressFilters);\n\t\t\t\t\tif (metadata.input.duration) progress.progress = progress.time / metadata.input.duration;\n\t\t\t\t\tself.emit('progress', progress);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (e) {\n\t\t\t\tself.emit('parseError', line);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t});\n\t\t\n\t};\n\t\n\t/* Spawns child and sets up piping */\n\tTranscoder.prototype._exec = function(a) {\n\t\t\n\t\tvar self = this;\n\t\t\n\t\tif ('string' == typeof this.source) a = [ '-i', this.source ].concat(a);\n\t\telse a = [ '-i', '-' ].concat(a);\n\t\t\n\t\t//console.log('Spawning ffmpeg ' + a.join(' '));\n\t\t\n\t\tvar child = spawn(FFMPEG_BIN_PATH, a, {\n\t\t\tcwd: os.tmpdir()\n\t\t});\n\t\tthis._parseMetadata(child);\n\t\t\n\t\tchild.stdin.on('error', function(err) {\n\t\t\ttry {\n\t\t\t\tif ('object' == typeof self.source) self.source.unpipe(this.stdin);\n\t\t\t} catch (e) {\n\t\t\t\t// Do nothing\n\t\t\t}\n\t\t});\n\t\t\n\t\tchild.on('exit', function(code) {\n\t\t\tif (!code) self.emit('finish');\n\t\t\telse self.emit('error', new Error('FFmpeg error: ' + self.lastErrorLine));\n\t\t});\n\t\t\n\t\t/*\n\t\tchild.stderr.on('data', function(chunk) {\n\t\t\tconsole.log(chunk.toString());\n\t\t});\n\t\t*/\n\t\t\n\t\tif ('object' == typeof this.source) this.source.pipe(child.stdin);\n\t\t\n\t\treturn child;\n\t\t\n\t};\n\t\n\t/* Compile arguments for FFmpeg */\n\tTranscoder.prototype._compileArguments = function () {\n\t\tvar a = [];\n\t\tfor (var key in this.args) a = a.concat(this.args[key]);\n\t\treturn a;\n\t};\n\t\n\tTranscoder.prototype.exec = function() {\n\t\treturn this._exec(this._compileArguments());\n\t};\n\t\n\t/* Makes FFmpeg write to stdout. Executes and returns stdout. */\n\tTranscoder.prototype.stream = function() {\n\t\tvar a = this._compileArguments();\n\t\ta.push('pipe:1');\n\t\treturn (this.stream = this._exec(a).stdout);\n\t};\n\t\n\t/* Makes FFmpeg write to file. Executes */\n\tTranscoder.prototype.writeToFile = function(file) {\n\t\tvar a = this._compileArguments();\n\t\ta = a.concat('-y', file);\n\t\tthis._exec(a);\n\t\treturn this;\n\t};\n\t\n\t/* Set video codec */\n\tTranscoder.prototype.videoCodec = function(codec) {\n\t\tthis.args['vcodec'] = [ '-vcodec', codec ];\n\t\treturn this;\n\t};\n\t\n\t/* Set video bitrate */\n\tTranscoder.prototype.videoBitrate = function(bitrate) {\n\t\tthis.args['b'] = [ '-b:v', bitrate ];\n\t\treturn this;\n\t};\n\t\n\t/* Set frames per second */\n\tTranscoder.prototype.fps = function(fps) {\n\t\tthis.args['r'] = [ '-r', fps ];\n\t\treturn this;\n\t};\n\t\n\t/* Set output format */\n\tTranscoder.prototype.format = function(format) {\n\t\tthis.args['format'] = [ '-f', format ];\n\t\tif (format.toLowerCase() == 'mp4') this.args['movflags'] = [ '-movflags', 'frag_keyframe+faststart' ];\n\t\treturn this;\n\t};\n\t\n\t/* Set maximum video size. Adjusts size to maintain aspect ratio, making it fit within the size */\n\tTranscoder.prototype.maxSize = function(width, height, alwaysScale) {\n\t\tif (alwaysScale === undefined) alwaysScale = true;\n\t\tvar fltWdth = 'min(trunc(' + width + '/hsub)*hsub\\\\,trunc(a*' + height + '/hsub)*hsub)';\n\t\tvar fltHght = 'min(trunc(' + height + '/vsub)*vsub\\\\,trunc(' + width + '/a/vsub)*vsub)';\n\t\tif (!alwaysScale) {\n\t\t\tfltWdth = 'min(trunc(iw/hsub)*hsub\\\\,' + fltWdth + ')';\n\t\t\tfltHght = 'min(trunc(ih/vsub)*vsub\\\\,' + fltHght + ')';\n\t\t}\n\t\tthis.args['vfscale'] = [ '-vf', 'scale=' + fltWdth + ':' + fltHght ];\n\t\treturn this;\n\t};\n\t\n\t/* Set minimum video size. Adjusts size to maintain aspect ratio, making it grow to size. */\n\tTranscoder.prototype.minSize = function(width, height, alwaysScale) {\n\t\tif (alwaysScale === undefined) alwaysScale = true;\n\t\tvar fltWdth = 'max(trunc(' + width + '/hsub)*hsub\\\\,trunc(a*' + height + '/hsub)*hsub)';\n\t\tvar fltHght = 'max(trunc(' + height + '/vsub)*vsub\\\\,trunc(' + width + '/a/vsub)*vsub)';\n\t\tif (!alwaysScale) {\n\t\t\tfltWdth = 'max(trunc(iw/hsub)*hsub)\\\\,' + fltWdth + ')';\n\t\t\tfltHght = 'max(trunc(ih/vsub)*vsub)\\\\,' + fltHght + ')';\n\t\t}\n\t\tthis.args['vfscale'] = [ '-vf', 'scale=' + fltWdth + ':' + fltHght ];\n\t\treturn this;\n\t};\n\t\n\t/* Sets the video size. Does not maintain aspect ratio. */\n\tTranscoder.prototype.size = function(width, height) {\n\t\tthis.args['s'] = [ '-s', width + 'x' + height ];\n\t\treturn this;\n\t};\n\t\n\t/* Sets the number of encoder passes. */\n\tTranscoder.prototype.passes = function(passes) {\n\t\tthis.args['pass'] = [ '-pass', passes ];\n\t\treturn this;\n\t};\n\t\n\t/* Sets the aspect ratio. */\n\tTranscoder.prototype.aspectRatio = function(ratio) {\n\t\tthis.args['aspect'] = [ '-aspect', ratio ];\n\t\treturn this;\n\t};\n\t\n\t/* Sets the audio codec */\n\tTranscoder.prototype.audioCodec = function(codec) {\n\t\tthis.args['acodec'] = [ '-acodec', codec ];\n\t\treturn this;\n\t};\n\t\n\t/* Set the audio sample rate */\n\tTranscoder.prototype.sampleRate = function(samplerate) {\n\t\tthis.args['ar'] = [ '-ar', samplerate ];\n\t\treturn this;\n\t};\n\t\n\t/* Set audio channels */\n\tTranscoder.prototype.channels = function(channels) {\n\t\tthis.args['ac'] = [ '-ac', channels ];\n\t\treturn this;\n\t};\n\t\n\t/* Set audio bitrate */\n\tTranscoder.prototype.audioBitrate = function(bitrate) {\n\t\tthis.args['ab'] = [ '-ab', bitrate];\n\t\treturn this;\n\t};\n\t\n\t/* Set custom FFmpeg parameter */\n\tTranscoder.prototype.custom = function(key, value) {\n\t\tvar args = [ '-' + key ];\n\t\tif (value !== undefined) {\n\t\t\targs.push(value);\n\t\t}\n\t\tthis.args[key] = args;\n\t\treturn this;\n\t};\n\t\n\t/* Capture still frame. Exports jpeg. */\n\tTranscoder.prototype.captureFrame = function(time) {\n\t\t\n\t\tvar secs = time / 1000;\n\t\t\n\t\tvar hours = Math.floor(secs / (60 * 60));\n\t\tvar divisor_for_minutes = secs % (60 * 60);\n\t\tvar minutes = Math.floor(divisor_for_minutes / 60);\n\n\t\tvar divisor_for_seconds = divisor_for_minutes % 60;\n\t\tvar seconds = Math.ceil(divisor_for_seconds);\n\t\t\n\t\twhile (seconds >= 60) {\n\t\t\tseconds -= 60;\n\t\t\tminutes++;\n\t\t}\n\t\t\n\t\twhile (minutes >= 60) {\n\t\t\tminutes -= 60;\n\t\t\thours++;\n\t\t}\n\t\t\t\t\n\t\tvar timestamp = hours.toString() + ':' + minutes.toString() + ':' + seconds.toString();\n\t\t\n\t\tthis.args['ss'] = [ '-ss', timestamp, '-an', '-r', '1', '-vframes', '1', '-y' ];\n\t\t\n\t\treturn this.videoCodec('mjpeg').format('mjpeg');\n\t\t\n\t};\n\t\n\treturn this;\n\t\n}\n\nutil.inherits(Transcoder, EventEmitter);\n\nmodule.exports = Transcoder;\n"}